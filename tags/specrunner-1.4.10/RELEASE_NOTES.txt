1.4.10
OK - Criar uma abstração que tenha valor, conversor/etc para usar no Column e não amarrar ao INodeHolder.
OK - Colocar getObject(...,true) no reset de colunas, deve ser silenciosa a avaliação do campo 'value'.
OK - Fazer o initialize do schema refazer o cálculo somente se mudar o objeto contexto (guardar o contexto velho no momento da chamada ao initialize, para evitar atributo desnecessário no código de Column);

1.4.09
OK- Colocar um boolean para saber se o default value é calculado no começo ou a cada uso (implicações de performance);
	Colocado para realizar reset dos valores default de um esquema toda as vezes que houver o reuso do schema;
OK - No caso de registros extra ou faltando pode-se omitir as colunas cujo valor esperado seja nullo (por convenção) isso reduz a quantidade de elementos na tela e facilita a leitura.
OK - Colocar o nome da coluna em outra linha no relatório textual e no web (alinhados à esquerda);
OK- Colocar um boolean para dizer se deve-se avaliar os argumentos fornecidos no getObject(), para usar no momento do getDefaultValue como uma feature, evitando assim avaliação desnecessária de expressões;
OK - Criar um nodeholder factory;
OK - Código estranho convertendo os argumentos e depois não usando eles:
	Object[] args = new Object[arguments.size()];
                for (int i = 0; i < arguments.size(); i++) {
                    args[i] = UtilEvaluator.evaluate(arguments.get(i), context, silent);
                }
                Object convert;
                try {
                    if (UtilLog.LOG.isTraceEnabled()) {
                        UtilLog.LOG.trace("Trying to convert '" + value + "' of type " + (value != null ? value.getClass() : " null") + " using " + converter + " with arguments: " + Arrays.toString(args));
                    }
                    convert = converter.convert(value, arguments.toArray());
                } catch (Exception e) {
                    throw new PluginException(e);
                }

1.4.08
OK - Imprimir a versão textual do relatório de não conformidades
	TODO: ajustar legibilidade do código, o cálculo do tamanho das colunas está obscuro.
OK - Performance continuada dos perfis positive e negative;
	- Colocar 
	fm.add(PluginConnection.REUSE,true)
	fm.add(PluginSchemaLoader.FEATURE_PROVIDER, SchemaLoaderXOM.class.getName());
OK - ajustar estilo para
	table.sr_treport th.sr_lreport {
		color: black;
		white-space: nowrap;
	}
OK - Fazer um listener de cenário que faça sempre o compareBase no final, e o que limpa pode ser uma extensão dele, isso será usado para os testes de pesquisa ou detalhamento, por exemplo;
OK - Calcular o valor default apenas quando for o momento de usar, isso tem impactado em testes de longa duração com esquema reusado.

1.4.07
OK - Resolver os @ScenarioListener incluindos os da super classe, busca recursiva até o object;
OK - Alinhar o caption do compareBase à esquerda;
OK - No relatório de erro mostrar apenas as colunas conflitantes;
OK - Isolar o filtro do prepare/verify do filter do compareBase senão não é possível popular a base com campos que devem ser desconsiderados na comparação final
	Obs: isso pode ser feito colocando-se o modo como parte da assinatura dos métodos filtrados, ou seja, se for modo input, output e compare já resolve.
OK - ExpectedMessages aumentado para aceitar substring de mensagens para validação, usar sempre com sorted='true' para funcionar o atributo 'criteria'.
OK - Criar os módulos de configuração padrão para os testes que queiram:
	1- Fazer testes sem escopo negativo - sem validação de counts; -> specrunner-sql-positive
	2- Fazer testes sem escopo negativo - com validação de counts; -> specrunner-sql-positive com o DatabaseCountListener
	3- Fazer testes com escopo negativo.                           -> specrunner-sql-negative
	
1.4.06
OK - trocar a cor do alien;
OK - Listener do módulo SQL que limpa a base e compara a base para cada cenario.
OK - Fazer mais exemplos de escopo negativo, com tabelas distintas e campos faltando;
OK - Não colocar 'order by' no compareBanco se não houver campos chave ou campo reference, usar somente se houver;
OK - Colocar o failsafe no segundo grupo

1.4.05
OK - Simplificar a verificação com escopo negativo (desenvolvedores só conseguem resolver de fato implementação com escopo negativo);
OK - Permitir usar tabelas vazias nos prepare e verify, para que o strict funcione verificando que a tabela está vazia;
OK - Rever a implementação do IWait que não ficou com a espera automática de campos em tela, tem algo errado no refactoring;

1.4.04
OK - Colocar tabelas com ignore em colunas ou linha no teste web, de forma que se possa ter na aplicação uma tabela mais complexa que o desejado, e o teste se limitar a ver apenas um grupo de dados:
	- Isso também pode ser conseguido colocando-se o número de linha que se deseja verificar, de preferência por ranges de valores como na impressão de páginas
	- Exemplos:
		<table class="compareTable"></table> pega tudo
		<table class="compareTable" rows="1" cols="1;5..."></table> só a primeira linha da tabela desejada
		<table class="compareTable" rows="1;6"></table> a primeira e a sexta linha
		<table class="compareTable" rows="1-3;6"></table> da 1 à 3 e da 6;
		<table class="compareTable" rows="1-3;6-8"></table> da 1 à 3 e da 6 à 8;
		<table class="compareTable" rows="1-3;6..."></table> da 1 à 3 e da 6 ao final;
		<table class="compareTable" rows="...3;6..."></table> do início à 3 e da 6 ao final;

1.4.03
OK - Usar o IFilter na execução dos prepare/verify não apenas no compare base. Isso vai permitir postergar a implementação de requisitos complexos como logs.
	 - Filtrado e pintado.

OK - Corrigir o inglês: Number of itens (10) in content is different from expected ones (9).
   - ITEMS... in field... é melhor.

OK - Trocar o método getNormalized(....) por um normalizador delegado também, enfim tudo que puder ser delegado e transformado em feature é flexibilidade desejada.
     Criada a interface IStringNormalizer e o método UtilString.normalize deixou de ser estático.

OK - Criar uma interface IWait para generalizar a espera pelo webdriver, isso permitirá usar diferentes estratégias sem precisar editar o código da superclasse.
    - Delegação ao invés de herança!

1.4.02
OK - Bug fix nas ações web aninhadas.

1.4.01
OK - Cada cenário chama @BeforeScenario e @AfterScenario antes e depois de executado.

1.4.00
OK - Criação de tags: scenario e title dentro de <scenario> para os títulos;
OK - Upgrade de bibliotecas;
OK - Colocar o campo nome do elemento HTML para reduzir digitação
	- Exemplo:  <set-valor>dado necessario</set-valor>
OK - Colocar o campo nome junto do css para reduzir digitação
	- Exemplo:  <span class="set-valor">dado necessario</span>
OK - Fazer o controle de quantidade final de registros na base de dados usando contadores com dado que e por fim;
	R: Usar o DatabaseCountListener
OK - Colocar um destruidor de recursos que é realizado sempre que um contexto é dropado ou finalizado, isso permite por exemplo finalizar as sessionfactories que são usadas em apenas um teste ou fechar browsers abertos que foram esquecidos pelo testador. Lembrar de não fechar aqueles que são reusados.
	R: adicionados listeners de contexto e de bloco.
OK - Context populator é um listener de contexto;
	R: populator removido e criado como listener

1.3.40
OK - Colocar uma opção para adicionar o estilo de debug mesmo sem rodar no modo debug, se o código gerar os tempos de qualquer forma do contrário não serve para nada;
OK - A ordem de execução dos listeners nos eventos finais (onEnd) deve ser feita na ordem reversa da inicialização (onStart).
OK - Ajustando headers para 2014.

1.3.39
OK - Colocar a verificação de que há duplicação de nomes/alias de tabelas e de nomes/alias e colunas;
	R: restrição adicionada
OK - Criar uma alias para poder usar por exemplo uma tabela 'Customers' mas na referência usar 'Customer'. :)
	R: para usar outro nome na coluna é só colocar o atributo 'table=<nome da tabela>'.
OK - Ajustar o tratamento de objects no mapeamento usando 'mapping';
	R: redefinição de campos corrigida vide exemplo TestRedefinition.java
OK - Layout de scenarios modificado:
	R: usando padrão Concordion Plus.

1.3.38
OK - Ajustes de ações de press/release key, criação de esc, tab e blur.
OK - Adicionado listener de tempo para os cenários.

1.3.37
OK - Criar um mecanismo automático para o waitfor ser injetado automaticamente antes de qualquer ação/comando a ser realizado em tela;
	R: Default é sempre esperar agora quando o driver não é HtmlUnit
OK - Colocar caption: FinderXPath.get().addStrategy("legenda", "//table/caption[contains(text(),'{0}')]/..");
	R: Adicionando 'caption' ao webdriver e ao htmlunit
OK - Colocar para o teste raiz desconsiderar as janelas relacionadas aos erros dentro de cenários;
	R: Agora os erros externos estão segregados dos cenários

1.3.36
OK - No Database deve-se verificar se os valores (vazios) estão com null na base de dados, ou seja no modo output deve-se verificar as colunas com valores 'null'. Considerar o caso onde se deseja realmente verificar se o valor é String vazia. 
	* Para vazio usar @e

1.3.35
OK - O reuso de browser está criando sempre novas conexões WebConnectionFile, desta forma a cache de arquivos não é reutilizada entre testes, apenas dentro do mesmo teste, o que não gera o ganho de performance geral desejado, corrigir.
OK - ver se os pending estão sendo notificados corretamente pelos listeners de execução junit.
OK - Colocar 4 caracteres nos valores de status:
+---------------- TXT (STATUS ORDER)---------------------+
                      # |  TIME (ms) |       % | ON                       | STATUS          | ASSERTS    | INPUT <-> OUTPUT
                      5 |      21584 |   23,11 | 2014-06-27 22:37:32.233  | success 4729/4729 | 14/14      | D:\ThiagoSantos\projetos\AUTRAN\TRUNK\Modelos_e_Implementacao\Java\autran\negocio\target\test-classes\br\gov\bcb\autran\crt2\dominio\concessao\TestCadastroConcessaoGrupo.html <-> D:\ThiagoSantos\projetos\AUTRAN\TRUNK\Modelos_e_Implementacao\Java\autran\negocio\target\output\br\gov\bcb\autran\crt2\dominio\concessao\TestCadastroConcessaoGrupo.html


1.3.34
OK - Rever necessidade de gerar screenshoot de cada célula de uma tabela inválida, afinal a tabela é a mesma, só está custando mais gerar os arquivos.
OK - Integrar a execução via HTML unit com suas otimizações (i.e. cache de arquivos) dentro do perfil do webdriver quando ele usar o HTMLUnit;

1.3.33
OK - Corrigir o timeout padrão do webdriver, o maxwait é dado em segundos e não em milisegundos;
OK - Colocar uns fire listeners nos cenários JUnit a medida que forem passando (falhando).

1.3.32
OK - Criar um "cuspidor de SQL" para gerar avulsos a partir dos testes (por exemplo, o de parâmetros de sistema);
OK - BUG: nos plugins que estendem AbstractPluginFind há falso positivo quando os elementos desejados não são encontrados, por exemplo, um enabled/disabled de um checkbox que não existe na tela.
	Ou seja, nos elementos que permitem ações sobre múltiplos componentes deve-se verificar se foi encontrado pelo menos 1, do contrário lançar erro.
OK - CSS: Colocar fundo branco no grupo de detalhamento do resultado;
OK - JS: Colocar para a exceção fazer scroll para a posição dela na tela, e no canto esquerdo.

1.3.31
OK - colocar uma campo de mensagem nas anotações pause, exemplos:
	<pause msg="parei aqui"/>, <span class="pause" msg="parei aqui"/>, <span pause="parei aqui"/>.
OK - Transformar o pause em um frame independente feito o errors messages, para ele aparecer independentemente do Eclipse, o que facilita a visão do option.

1.3.30
OK - Fazer os campos de select selecionarem, ou verificarem os itens de forma normalizada (mas podendo escolher se não normaliza, default sempre normaliza), isso evita muito falso negativo;

1.3.29
OK - quando houver erro no plugin sentence, mostrar sempre a exceção encapsulada que tiver o tipo diferente de runtime, ou que seja do tipo IPresentation;
OK - o Runner só deve fazer sleep/wait para ações que não são 'nop';

1.3.28
OK - Ver a questão do assert de tela ser feito usando os próprios componentes visuais (exemplo: select) - usado estratégia do 'as=<tipo>';
OK - Corrigir o código de URI.resolve para aceitar mais que 12 níveis de '../' (http://www.ietf.org/rfc/rfc2396.txt  - Seção 5.2);
    Nesse ponto adicionei um IResolver para usar a estratégia que quiser além do URI.resolve(...);

1.3.27
OK - Melhorando a estratégia de JOINED com nomes de tabelas, CSS e tratamento de erro instrutivo.

1.3.26
OK - Criar uma estratégia para representar tabelas JOINED do hibernate usando apenas uma tabela única, agregando nela todos os atributos das demais tabelas, na verdade é fazer algo como o secondary table funcionar no nível da especificação. (usar a combinação de colgroup com transformador).

1.3.25
OK - Adicionar uma feature para ignorar determinados status ou comand types, por exemplo, ignorar os warnings no anotador de saída.
OK - Adicionar o navegador de errors na tela. (Java).
OK - Melhor deixar (colocar só um title?)! - Colocar o warning para não gerar botão de expansão; -> Decidi permitir filtrar os IResult direto no result set.

1.3.24
OK - No momento que der erro de comparação com os dados da base, mostrar dentro do parênteses o valor que veio da base, e não o valor já da tela, 
OK - Bem como no caso de clobs mostrar a comparação com strings e não to toString() do clob para se saber qual o conteúdo.

1.3.23.
OK - Formatação e numeração dos botões de acordo com o tipo da ação.

1.3.22
OK - Quando os valores de comparação de base não coincidirem colocar os tipos ao lado para facilitar a identificação dos erros;
OK - No relatório de escopo negativo transformar os clobs em texto para exibição (colocar um boolean para indicar se deve ser assim ou não, pois pode haver sistemas que tenha clobs realmente grandes que não devem ser exibidos);
OK - No relatório de escopo negativo usar texto ao invés de title e css para mostrar os campos das tabelas;
OK - Corrigir o "protected void performUpdate(", ele deve sempre ter ou key ou reference para usar no WHERE, quando não tiver lancar um erro (não precisa, vai haver um update com set e where idênticos, aí aponta o erro de id/references);
OK - Aumentar o nível de log para trace no "2014-04-14 13:24:24,144 [main] DEBUG on [FeatureManagerImpl.java,163] - Feature 'org.specrunner.listeners.core.PauseOnFailureNodeListener.condition' set to object 'org";

1.3.21
OK - Testar escopo negativo apenas com reference;
OK - Ver o enumerador de resultset, está dando falso positivo no escopo negativo.
OK - Verificar se o virtual do comparador de bases funciona mesmo com update.
OK - Parametrizar o PluginObjectManager para ser ThreadLocal ou não, isso é necessário nos testes envolvendo o Jetty que cria threads específicos para cada requisição.
OK - Criar o conceito de listeners por cenários, para, por exemplo, limpar os objetos em memória.
OK - Resolver o problema de timestamp Vs date na base de dados. Coloquei uma feature para timezone nos conversores date/timestamp.
OK - Colocar o pause failure listener para ter o mesmo modelo de pausa condicionada de forna a não travar integração contínua;
OK - Verificar o plugin sentence que não está aceitando apenas o argumento como texto;
OK - Criar um comparador de tempo que aceite qualquer combinação de tipos date/timestamp/jodatime.
OK - Criar um comparator de strings com trim e um normalizado para uso com o banco de dados;
OK - Ver se é possível manter os valores de campos enumerados no resultado para facilitar a visualização
OK - Ver uma estratégia para resolver registros de log de auditoria;
OK - Colocar uma feature para habilitar ou não a pausa, de forma que no Linux, por exemplo, a pausa nunca seja executada p/não travar a integração contínua;
OK - Fazer o plugindatabase poder escolher entre doStart e doEnd (in e out); Usando o doEnd;
OK - Lançar erros quando cenários tiverem os mesmos nomes;
OK - Reduzir o log do reuso de imagens no resultado para nível 'trace';
OK - No uso de imagens idênticas no mesmo arquivo usar uma cache com o nome do gerado para economizar cópias na saída;
OK - Ver porque que as imagens dentro de tables não não estão sendo copiadas para o destino dentro de compareTable;

OK - targets ajustados para Linux
------
URI:file:/opt/java/hudson/workspace/disin.autran/web/target/test-classes/br/gov/bcb/autran/web/crt2/servidores.html
TARGET:/opt/java/hudson/workspace/disin.autran/web/target/test-classes/br/gov/bcb/autran/web/crt2/servidores.html
URI:jar:file:/opt/java/hudson/workspace/disin.autran/negocio/target/negocio-1.0.0-tests.jar!/objetos/servidor.html
TARGET:jar:file:/opt/java/hudson/workspace/disin.autran/negocio/target/negocio-1.0.0-tests.jar!/objetos/servidor.html
URI:file:/opt/java/hudson/workspace/disin.autran/web/target/test-classes/br/gov/bcb/autran/web/crt2/login/login.html
TARGET:/opt/java/hudson/workspace/disin.autran/web/target/test-classes/br/gov/bcb/autran/web/crt2/login/login.html
------

- Delegar a criação de:
	1- PageListeners;
        2-WritablePages  - OK feito!
para poder substituir quando quiser, o uso de herança inviabiliza a substituição.

OK - O renaming de arquivos no Linux não funciona direito, substituir pelo código: FileUtils.moveDirectory(from, to); 

Corrigir todo ponto de "file:" para deixar esperto o suficiente para funcionar em Linux (sources, includes, runners, etc) - unificar código para facilitar manutenção.
USAR como exemplo:
-      URL location = clazz.getProtectionDomain().getCodeSource().getLocation();
        String str;
        try {
            URI ui = location.toURI();
            System.out.println("UI:" + ui);
            File file = new File(ui);
            str = file.toString();
            System.out.println("FILE:" + file);
            if (file.isDirectory()) {
                str = str + File.separator;
            }
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
-------------------------------------------------------------------------
OK

OK - Corrigir os links do recursos (screen/source) para serem relativos ao arquivo de saída.
OK - Colocar todas as caches de objetos como no mínimo protected para permitir reuso. 
OK -Trocar os valores dos campos na especificação também para as telas, assim com foi feito para o SQL, melhora a depuração; 
OK - Fazer também no SQL depois que ele realizar a conversão, para melhorar a tela. 
OK - MELHORAR O LEITOR DE  SQL; 

Criar o conceito de composite action, para tarefas agrupadas, e o somatório ser segregado, bem com a exibição no relatório de debug. (Precisa?)
